#ifndef INTERFACE_h
#define INTERFACE_h

class Interface : public Position
{
private:
	int id;
	HWND hWnd;
	string name;
	string type;
	long unsigned int style;
	long unsigned int additionalStyles;
	bool tabStop;
	UINT tabStopId;
	HFONT font;
	HINSTANCE hInstance;
	HWND hParent;
	string parentClassName;
	HMENU hMenu;

public:
	Interface(HWND hWnd=NULL) : hWnd(hWnd), id(0), name(""), type(""), style(0L), additionalStyles(0L), tabStop(false), tabStopId(0), hMenu((HMENU)0)
	{
		HGDIOBJ hfDefault=GetStockObject(DEFAULT_GUI_FONT);
		this->font = (HFONT)hfDefault;
	}
	~Interface();

	///<summary>Set all values for element.</summary>
	///<param name="hParent">Handle to parent</param>
	///<param name="parentClassName">Name of parent class</param>
	///<param name="hInstance">Instance of parent.</param>
	///<param name="name">Name of element.</param>
	///<param name="x">X position of element.</param>
	///<param name="y">Y position of element.</param>
	///<param name="width">Width of element.</param>
	///<param name="height">Height of element.</param>
	void SetAll(HWND hParent, string parentClassName, HINSTANCE hInstance, string name, INT x=0, INT y=0, UINT width=20, UINT height=20);

	///<summary>Get or set id parameter</summary>
	///<param name="newId">If parameter is empty (or == 0), value of "id" will be returned. Else value of "id" will be set to "newId" value.</param>
	///<returns>Actual or updated value of "id".</returns>
	UINT Id(UINT id=0);

	///<summary>Get or set "hWnd" parameter</summary>
	///<param name="newHWnd">If parameter is empty (or == NULL), value of "hWnd" will be returned. Else value of "hWnd" will be set to "newHWnd" value.</param>
	///<returns>Actual or updated value of hWnd.</returns>
	HWND HWnd(HWND newHWnd=NULL);

	///<summary>Get or set "name" parameter</summary>
	///<param name="newName">If parameter is empty (or == ""), value of "name" will be returned. Else value of "name" will be set to "newName" value.</param>
	///<returns>Actual or updated value of name.</returns>
	LPCSTR Name(string newName="");

	///<summary>Get or set "type" parameter</summary>
	///<param name="newType">If parameter is empty (or == 0), value of "type" will be returned. Else value of "type" will be set to "newType" value.</param>
	///<returns>Actual or updated value of "type".</returns>
	string Type(string newType="");

	///<summary>Get or set "font" parameter</summary>
	///<param name="fontName">If parameter is empty (or == ""), value of "font" will be returned. Else value of "font" will be set to "fontName" value.</param>
	///<returns>Actual or updated value of "font".</returns>
	HFONT SetFont(string fontName="", bool update=false);

	///<summary>Set "font" parameter to stock font.</summary>
	///<param name="stockFont">Font generated by GetStockObject().</param>
	///<returns>Actual value of "font".</returns>
	HFONT SetFont(HGDIOBJ stockFont, bool update=false);

	///<summary>Update "font".</summary>
	void UpdateFont();

	///<summary>Set tabStop and tabStopId values</summary>
	///<param name="mode">True to enable tabStop, False to disable tabStop</param>
	///<param name="positionInList">Position on tabStop list. -1 to disable tabStop.</param>
	///<returns>Method always return 1.</returns>
	UINT TabStop(bool mode, int positionInList=(-1));

	///<summary>Set style of interface.</summary>
	///<param name="style">WinAPI style identifier.</param>
	///<returns>Method always return 1.</returns>
	long unsigned int Style(long unsigned int style=0, bool additional=false, bool reset=false);

	///<summary>Create window using data from class.</summary>
	///<returns>Returns handle to window.</returns>
	HWND CreateWindowMethod();

	///<summary>Get or set hInstance parameter</summary>
	///<param name="pointer">If parameter is empty (or == NULL), value of "hInstance" will be returned. Else value of "hInstance" will be set to "pointer" value.</param>
	///<returns>Actual or updated value of "hInstance".</returns>
	HINSTANCE HInstance(HINSTANCE pointer=NULL);

	///<summary>Get or ser additional styles</summary>
	///<param name="additionalStyles">If parameter is empty (or == 0L), value of "additionalStyles" will be returned. Else value of "additionalStyles" will be set to "addtionalStyles" value.</param>
	///<returns>Actual or updated value of "additionalStyles"</returns>
	long unsigned int AdditionalStyles(long unsigned int additionalStyles=0L); 

	///<summary>Get or set hParent parameter</summary>
	///<param name="pointer">If parameter is empty (or == NULL), value of "hParent" will be returned. Else value of "hParent" will be set to "pointer" value.</param>
	///<returns>Actual or updated value of "hParent".</returns>
	HWND HParent(HWND pointer=NULL);

	///<summary>Get or set "parentClassName" parameter</summary>
	///<param name="newName">If parameter is empty (or == ""), value of "parentClassName" will be returned. Else value of "parentClassName" will be set to "parentClassName" value.</param>
	///<returns>Actual or updated value of "parentClassName".</returns>
	LPCSTR ParentClassName(string newName="");

	///<summary>Get or set "hMenu" parameter</summary>
	///<param name="newName">If parameter is empty (or == -1), value of "hMenu" will be returned. Else value of "hMenu" will be set to "id" value.</param>
	///<returns>Actual or updated value of "hMenu".</returns>
	HMENU HMenu(int id=-1);

	///<summary>Set focus to current interface</summary>
	///<returns>If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. Else, null is returned.</returns>
	void SetFocus();
};

#endif